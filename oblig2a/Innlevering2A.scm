#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 67 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 206 18 4 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 0 1
#"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1           0 1193 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 14 3 4 #"load"
0 0 27 3 1 #" "
0 0 20 3 13 #"\"huffman.scm\""
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 11 #";;Oppgave 1"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(a)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"p-cons"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 27 3 3 #") ("
0 0 14 3 4 #"proc"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 5 #"p-car"
0 0 27 3 1 #" "
0 0 14 3 3 #"par"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"par"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 3 #"kar"
0 0 27 3 1 #" "
0 0 14 3 3 #"kdr"
0 0 27 3 2 #") "
0 0 14 3 3 #"kar"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 5 #"p-cdr"
0 0 27 3 1 #" "
0 0 14 3 3 #"par"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 3 #"par"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 3 #"kar"
0 0 27 3 1 #" "
0 0 14 3 3 #"kdr"
0 0 27 3 2 #") "
0 0 14 3 3 #"kdr"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(b)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 1 #" "
0 0 14 3 3 #"foo"
0 0 27 3 1 #" "
0 0 23 3 2 #"30"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"(("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"   ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 3 #"foo"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #" "
0 0 14 3 3 #"foo"
0 0 27 3 1 #" "
0 0 23 3 2 #"20"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"(("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 3 #"foo"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"   (("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 3 #"foo"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 4 #"    "
0 0 14 3 3 #"foo"
0 0 27 3 1 #" "
0 0 23 3 2 #"20"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 1 #" "
0 0 23 3 2 #"10"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 40 #";;Det f\303\270rste utrykket evalueres til: 80"
0 0 27 29 1 #"\n"
0 0 18 3 38 #";;Det andre utrykket evalueres til: 40"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 94
(
 #";;Grunnen til at de gir ulik verdi er fordi det andre utrykket har n"
 #"estede let-utrykk og gj\303\270r"
) 0 0 27 29 1 #"\n"
0 0 18 3 96
(
 #";;evalueringprosessen annerledes. I det f\303\270rste utrykket gis v"
 #"erdiene samtidig, mens i det andre"
) 0 0 27 29 1 #"\n"
0 0 18 3 113
(
 #";;gis det sekvensielt. Dermed f\303\245r x i det andre utrykket verd"
 #"ien til den foo etter at den har blitt satt til 10,"
) 0 0 27 29 1 #"\n"
0 0 18 3 73
(
 #";;mens i det f\303\270rste utrykket f\303\245r x verdien til orginal"
 #"e foo, alts\303\245 30."
) 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(c)"
0 0 27 29 1 #"\n"
0 0 18 3 29 #";;Resultatet blir : (6 -4 21 "
0 6          10 18 4 #"1/2\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 18 3 1 #")"
0 0 27 29 1 #"\n"
0 0 18 3 62
#";;y er listen med prosedyren, mens x og z er listene med tall."
0 0 27 29 1 #"\n"
0 0 18 3 118
(
 #";;Dermed blir f\303\270rste prosedyre i a2 utf\303\270rt p\303\245 f"
 #"\303\270rste element i a1 og a3. Siden det ogs\303\245 er en map-pro"
 #"sedyre rundt"
) 0 0 27 29 1 #"\n"
0 0 18 3 94
(
 #";;lambda utrykket blir f\303\270rste element i x og z utf\303\270rt "
 #"med f\303\270rste element i y som prosedyre,"
) 0 0 27 29 1 #"\n"
0 0 18 3 10 #";;deretter"
0 0 18 3 1 #" "
0 0 18 3 4 #"blir"
0 0 18 3 1 #" "
0 0 18 3 5 #"andre"
0 0 18 3 1 #" "
0 0 18 3 7 #"element"
0 0 18 3 1 #" "
0 0 18 3 1 #"i"
0 0 18 3 1 #" "
0 0 18 3 1 #"x"
0 0 18 3 1 #" "
0 0 18 3 2 #"og"
0 0 18 3 52
#" z utf\303\270rt med andre element i y som prosedyre. Osv."
0 0 27 29 1 #"\n"
0 0 18 3 100
(
 #";;Meningen med lambdaprosedyren er at man kan skrive argumentene inn"
 #" p\303\245 vanlig m\303\245te alts\303\245 \"infix\""
) 0 0 27 29 1 #"\n"
0 0 18 3 90
(
 #";;og lambdaprosedyren gj\303\270r det om til \"prefix\" notasjon, so"
 #"m er det scheme krever/bruker."
) 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 2 #"(("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"y"
0 0 27 3 1 #" "
0 0 14 3 1 #"z"
0 0 27 3 3 #") ("
0 0 14 3 1 #"y"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 1 #"z"
0 0 27 3 3 #")) "
0 0 23 3 1 #"2"
0 0 27 3 1 #" "
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 23 3 1 #"3"
0 0 27 3 3 #")  "
0 0 18 3 8 #";  ->  5"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 11 #";;Oppgave 2"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(a)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 2 #") "
0 0 23 3 2 #"#f"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        (("
0 0 14 3 3 #"eq?"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 3 #")) "
0 0 23 3 2 #"#t"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(b)"
0 0 27 29 1 #"\n"
0 0 18 3 91
(
 #";;Hvis ikke det hadde v\303\246rt en intern prosedyre hadde ikke pro"
 #"sessen husket utgangspunktet."
) 0 0 27 29 1 #"\n"
0 0 18 3 84
(
 #";;Siden tree er i den ytterste prosedyren, kan den brukes i hjelpepr"
 #"osedyren uten \303\245"
) 0 0 27 29 1 #"\n"
0 0 18 3 29 #";;overskrive argumentet tree."
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(c)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"decode"
0 0 27 3 1 #" "
0 0 14 3 4 #"bits"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"decode-it"
0 0 27 3 1 #" "
0 0 14 3 4 #"bits"
0 0 27 3 1 #" "
0 0 14 3 14 #"current-branch"
0 0 27 3 1 #" "
0 0 14 3 7 #"message"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 4 #"bits"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 7 #"reverse"
0 0 27 3 1 #" "
0 0 14 3 7 #"message"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 27 3 3 #" (("
0 0 14 3 11 #"next-branch"
0 0 27 29 1 #"\n"
0 0 27 3 16 #"               ("
0 0 14 3 13 #"choose-branch"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 4 #"bits"
0 0 27 3 2 #") "
0 0 14 3 14 #"current-branch"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 1 #" "
0 0 14 3 11 #"next-branch"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 9 #"decode-it"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 4 #"bits"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 25 #"                         "
0 0 14 3 4 #"tree"
0 0 27 29 1 #"\n"
0 0 27 3 26 #"                         ("
0 0 14 3 4 #"cons"
0 0 27 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 27 3 1 #" "
0 0 14 3 11 #"next-branch"
0 0 27 3 2 #") "
0 0 14 3 7 #"message"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 9 #"decode-it"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 4 #"bits"
0 0 27 3 2 #") "
0 0 14 3 11 #"next-branch"
0 0 27 3 1 #" "
0 0 14 3 7 #"message"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 9 #"decode-it"
0 0 27 3 1 #" "
0 0 14 3 4 #"bits"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 1 #" "
0 0 23 3 1 #"'"
0 0 27 3 4 #"()))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(d)"
0 0 27 29 1 #"\n"
0 0 18 3 3 #";;("
0 0 18 3 6 #"ninjas"
0 0 18 3 1 #" "
0 0 18 3 5 #"fight"
0 0 18 3 1 #" "
0 0 18 3 6 #"ninjas"
0 0 18 3 1 #" "
0 0 18 3 2 #"by"
0 0 18 3 1 #" "
0 0 18 3 6 #"night)"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(e)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"element-of-set?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 1 #" "
0 0 14 3 3 #"tre"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 3 #"tre"
0 0 27 3 2 #") "
0 0 23 3 2 #"#f"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        (("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 3 #"tre"
0 0 27 3 3 #")) "
0 0 23 3 2 #"#t"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 15 #"element-of-set?"
0 0 27 3 1 #" "
0 0 14 3 1 #"x"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 3 #"tre"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 6 #"encode"
0 0 27 3 1 #" "
0 0 14 3 7 #"message"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 7 #"message"
0 0 27 3 1 #")"
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        (("
0 0 14 3 5 #"pair?"
0 0 27 3 1 #" "
0 0 14 3 7 #"message"
0 0 27 3 3 #") ("
0 0 14 3 6 #"append"
0 0 27 3 2 #" ("
0 0 14 3 13 #"encode-symbol"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 7 #"message"
0 0 27 3 2 #") "
0 0 14 3 4 #"tree"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 34 #"                                 ("
0 0 14 3 6 #"encode"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 7 #"message"
0 0 27 3 2 #") "
0 0 14 3 4 #"tree"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 13 #"encode-symbol"
0 0 27 3 1 #" "
0 0 14 3 7 #"message"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 5 #")))) "
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 13 #"encode-symbol"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"branch-correct?"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 15 #"element-of-set?"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 7 #"symbols"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 15 #"branch-correct?"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"             "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 1 #"0"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"0"
0 0 27 3 2 #" ("
0 0 14 3 13 #"encode-symbol"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 6 #"))))) "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        (("
0 0 14 3 15 #"branch-correct?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 13 #"             "
0 0 23 3 1 #"'"
0 0 27 3 1 #"("
0 0 23 3 1 #"1"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 27 3 1 #" "
0 0 23 3 1 #"1"
0 0 27 3 2 #" ("
0 0 14 3 13 #"encode-symbol"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 7 #")))))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(f)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 17 #"grow-huffman-tree"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 9 #"grow-tree"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 1 #")"
0 0 23 3 1 #"'"
0 0 27 3 3 #"())"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"          (("
0 0 14 3 5 #"null?"
0 0 27 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 12 #"          (("
0 0 14 3 5 #"null?"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 3 #"))("
0 0 14 3 14 #"make-code-tree"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 27 3 2 #" ("
0 0 14 3 14 #"make-code-tree"
0 0 27 3 2 #" ("
0 0 14 3 14 #"make-code-tree"
0 0 27 3 2 #" ("
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 4 #")) ("
0 0 14 3 9 #"grow-tree"
0 0 27 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 6 #"))))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 9 #"grow-tree"
0 0 27 3 2 #" ("
0 0 14 3 13 #"make-leaf-set"
0 0 27 3 1 #" "
0 0 14 3 5 #"items"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(g)"
0 0 27 29 1 #"\n"
0 0 18 3 40 #";;Det brukes 43 bits til \303\245 kode svaret."
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 55
#";;Gjennomsnittelig lengde p\303\245 kodeord er 43 / 17 = 2.53"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 51 #";;For \303\245 kunne kode meldingen under med fast lengde"
0 0 27 29 1 #"\n"
0 0 18 3 6 #";;blir"
0 0 18 3 1 #" "
0 0 18 3 3 #"den"
0 0 18 3 1 #" "
0 0 18 3 5 #"faste"
0 0 18 3 1 #" "
0 0 18 3 7 #"lengden"
0 0 18 3 1 #" "
0 0 18 3 14 #"p\303\245 hvert ord "
0 0 18 3 2 #"4."
0 0 18 3 1 #" "
0 0 18 3 5 #"Siden"
0 0 18 3 1 #" "
0 0 18 3 25 #"det er 17 ord blir svaret"
0 0 27 29 1 #"\n"
0 0 18 3 84
(
 #";;da at det trengs 68 bits for \303\245 kunne kode meldingen med fas"
 #"t lengde (4*17 = 68). "
) 0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(h)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 14 #"huffman-leaves"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 19 #"                  ("
0 0 14 3 11 #"weight-leaf"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 7 #"      ("
0 0 14 3 6 #"append"
0 0 27 3 2 #" ("
0 0 14 3 14 #"huffman-leaves"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 15 #"              ("
0 0 14 3 14 #"huffman-leaves"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 5 #")))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 12 #"huffman-leaf"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"branch-correct?"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 15 #"element-of-set?"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 7 #"symbols"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 15 #"branch-correct?"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 4 #")) ("
0 0 14 3 11 #"weight-leaf"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 12 #"huffman-leaf"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        (("
0 0 14 3 15 #"branch-correct?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 4 #"list"
0 0 27 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 4 #")) ("
0 0 14 3 11 #"weight-leaf"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 12 #"huffman-leaf"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 6 #"))))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 5 #";;(i)"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 20 #"expected-code-length"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"let*"
0 0 27 3 3 #" (("
0 0 14 3 6 #"leaves"
0 0 27 3 2 #" ("
0 0 14 3 14 #"huffman-leaves"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 7 #"symbols"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 3 #"car"
0 0 27 3 1 #" "
0 0 14 3 6 #"leaves"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 5 #"freqs"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 4 #"cadr"
0 0 27 3 1 #" "
0 0 14 3 6 #"leaves"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 3 #"sum"
0 0 27 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 27 3 1 #" "
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 5 #"freqs"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 7 #"lengths"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"s"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 8 #"       ("
0 0 14 3 6 #"length"
0 0 27 3 2 #" ("
0 0 14 3 13 #"encode-symbol"
0 0 27 3 1 #" "
0 0 14 3 1 #"s"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 11 #"           "
0 0 14 3 7 #"symbols"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 5 #"probs"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 27 3 2 #" ("
0 0 14 3 1 #"f"
0 0 27 3 3 #") ("
0 0 14 3 1 #"/"
0 0 27 3 1 #" "
0 0 14 3 1 #"f"
0 0 27 3 1 #" "
0 0 14 3 3 #"sum"
0 0 27 3 3 #")) "
0 0 14 3 5 #"freqs"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 8 #"products"
0 0 27 3 2 #" ("
0 0 14 3 3 #"map"
0 0 27 3 1 #" "
0 0 14 3 1 #"*"
0 0 27 3 1 #" "
0 0 14 3 5 #"probs"
0 0 27 3 1 #" "
0 0 14 3 7 #"lengths"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 27 3 1 #" "
0 0 14 3 1 #"+"
0 0 27 3 1 #" "
0 0 14 3 8 #"products"
0 0 27 3 3 #")))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 3 1 #"("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 11 #"leaf-weight"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 1 #")"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 27 3 2 #" ("
0 0 14 3 15 #"branch-correct?"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 2 #") "
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 6 #"equal?"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 11 #"symbol-leaf"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 9 #"        ("
0 0 14 3 15 #"element-of-set?"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 7 #"symbols"
0 0 27 3 1 #" "
0 0 14 3 6 #"branch"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 27 3 3 #" (("
0 0 14 3 15 #"branch-correct?"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 11 #"weight-leaf"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 11 #"leaf-weight"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 11 #"left-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 4 #"))))"
0 0 27 29 1 #"\n"
0 0 27 3 10 #"        (("
0 0 14 3 15 #"branch-correct?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 3 #")) "
0 0 27 29 1 #"\n"
0 0 27 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 27 3 2 #" ("
0 0 14 3 5 #"leaf?"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 11 #"weight-leaf"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 2 #"))"
0 0 27 29 1 #"\n"
0 0 27 3 14 #"             ("
0 0 14 3 11 #"leaf-weight"
0 0 27 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 27 3 2 #" ("
0 0 14 3 12 #"right-branch"
0 0 27 3 1 #" "
0 0 14 3 4 #"tree"
0 0 27 3 6 #"))))))"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 18 3 87
(
 #";;Et kriterie er at treet er satt opp riktig. Hvis ikke blir vekten "
 #"p\303\245 symbolene feil,"
) 0 0 27 29 1 #"\n"
0 0 18 3 39 #";;og dermed blir utregningene ukorekte."
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0 0 27 29 1 #"\n"
0           0
